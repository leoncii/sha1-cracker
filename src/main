use sha1::Digest;
use std::{
    env,
    error::Error,
    fs::File,
    io::{BufReader,BufRead},
};

const SHA1_HEX_STRING_LEN:usize = 40;
fn main() -> Result<(), Box<dyn Error>> {
    let args: Vec<String> = env::args().collect();

    if args.len() != 3 {
        println!("Usage:");
        println!("sha1_pwn <wordlist.txt> <hash>");
        return Ok(());
    }

    let hash_to_crack = args[2].trim();
    if hash_to_crack.len() != SHA1_HEX_STRING_LEN {
        return Err("Hash is not valid".into());
    }

    let wordlist_file = File::open(&args[1])?;
    let reader = BufReader::new(&wordlist_file);
    
    for line in reader.lines() {
        let line_exist = line?;
        let l = line_exist.trim();
        if hash_to_crack == &hex::encode(sha1::Sha1::digest(l.as_bytes())) {
            print!("{}", &l);
            return Ok(());
        }
    }
    println!("password not found in wordlist :(");
    Ok(())
}
